{"version":3,"sources":["webpack:///./routes/google-scholar-scraper/style.css","webpack:///./routes/google-scholar-scraper/index.js"],"names":["GoogleScholarScraper","_scholarData$articles","_scholarData$articles2","_useState2","_slicedToArray","useState","scholarData","setScholarData","_useState4","isLoading","setIsLoading","_useState6","error","setError","_useState8","serverUrl","useEffect","fetchScholarData","_ref","_asyncToGenerator","response","fetch","concat","ok","errorData","json","Error","status","data","Object","keys","length","console","message","apply","arguments","handleScrape","_ref2","method","headers","h","class","style","onClick","disabled","name","affiliation","hIndex","i10Index","citations","Date","lastUpdated","toLocaleString","articles","map","article","index","key","title","authors","publication","year"],"mappings":"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","file":"route-google-scholar-scraper.chunk.29ae9.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"scraperContainer\":\"scraperContainer__cMV1G\",\"scrapeButton\":\"scrapeButton__DsaZV\",\"refreshButton\":\"refreshButton__TQ1fo\",\"error\":\"error__FfBKN\",\"loading\":\"loading__AT0sn\",\"result\":\"result__ayCcW\"};","import { h } from 'preact';\nimport { useState, useEffect } from 'preact/hooks';\nimport style from './style.css';\n\nconst GoogleScholarScraper = () => {\n  const [scholarData, setScholarData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [serverUrl, setServerUrl] = useState('http://localhost:3000');\n\n  useEffect(() => {\n    fetchScholarData();\n  }, []);\n\n  const fetchScholarData = async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${serverUrl}/api/get-scholar-data`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(`HTTP error! status: ${response.status}, message: ${errorData.error}`);\n      }\n      const data = await response.json();\n      if (Object.keys(data).length === 0) {\n        setError('No data available. Please scrape Google Scholar first.');\n      } else {\n        setScholarData(data);\n      }\n    } catch (error) {\n      console.error('Error fetching Google Scholar data:', error);\n      setError(`Failed to fetch Google Scholar data: ${error.message}`);\n    }\n    setIsLoading(false);\n  };\n\n  const handleScrape = async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${serverUrl}/api/scrape-google-scholar`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(`HTTP error! status: ${response.status}, message: ${errorData.error}`);\n      }\n      const data = await response.json();\n      setScholarData(data);\n    } catch (error) {\n      console.error('Error scraping Google Scholar:', error);\n      setError(`Failed to scrape Google Scholar: ${error.message}`);\n    }\n    setIsLoading(false);\n  };\n\n  return (\n    <div class={style.scraperContainer}>\n      <h2>Google Scholar Data</h2>\n      <button onClick={handleScrape} disabled={isLoading} class={style.scrapeButton}>\n        {isLoading ? 'Updating...' : 'Update Google Scholar Data'}\n      </button>\n      <button onClick={fetchScholarData} disabled={isLoading} class={style.refreshButton}>\n        Refresh Data from File\n      </button>\n      {error && <div class={style.error}>{error}</div>}\n      {isLoading && <div class={style.loading}>Loading... This may take a few minutes.</div>}\n      {scholarData && (\n        <div class={style.result}>\n          <h3>Scholar Data:</h3>\n          <p>Name: {scholarData.name}</p>\n          <p>Affiliation: {scholarData.affiliation}</p>\n          <p>H-index: {scholarData.hIndex}</p>\n          <p>i10-index: {scholarData.i10Index}</p>\n          <p>Total Citations: {scholarData.citations}</p>\n          <p>Last Updated: {new Date(scholarData.lastUpdated).toLocaleString()}</p>\n          <h4>Articles ({scholarData.articles?.length || 0}):</h4>\n          <ul>\n            {scholarData.articles?.map((article, index) => (\n              <li key={index}>\n                <strong>{article.title}</strong>\n                <br />\n                {article.authors}\n                <br />\n                {article.publication} ({article.year})\n                <br />\n                Citations: {article.citations}\n              </li>\n            )) || <li>No articles available</li>}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GoogleScholarScraper;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"sourceRoot":""}